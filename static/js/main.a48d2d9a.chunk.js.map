{"version":3,"sources":["components/Employee.js","utils/API.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Employee","props","id","first","last","email","cell","age","address","city","state","zip","axios","get","baseArray","Table","employees","sortAsc","handleSubmit","event","preventDefault","searchParam","target","search","value","toLowerCase","handleReset","searchedArray","filter","e","name","includes","setState","this","generateEmployees","API","then","res","data","results","forEach","item","i","newArray","sort","a","b","dob","location","postcode","className","onSubmit","type","placeholder","onClick","sortEmployeesId","sortEmployeesFirst","sortEmployeesLast","sortEmployeesAge","sortEmployeesState","sortEmployeesZip","map","employee","street","number","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a48d2d9a.chunk.js","sourcesContent":["import React from \"react\";\n\n  const Employee = (props) => {\n    return (\n      <tr>\n        <td>{props.id}</td>\n        <td>{props.first}</td>\n        <td>{props.last}</td>\n        <td>{props.email}</td>\n        <td>{props.cell}</td>\n        <td>{props.age}</td>\n        <td>{props.address}</td>\n        <td>{props.city}</td>\n        <td>{props.state}</td>\n        <td>{props.zip}</td>\n\n\n      </tr>\n    );\n  }\n\nexport default Employee;\n","import axios from \"axios\";\n\n// Export an object containing methods we'll use for accessing the Dog.Ceo API\n\nexport default {\n  getRandomEmployee: function() {\n    return axios.get(\"https://randomuser.me/api/?nat=us&results=100\");\n  },\n};\n\n// export default API;","import React, { Component } from \"react\";\nimport Employee from \"./Employee\";\nimport API from \"../utils/API\";\nimport \"./TableStyle.css\";\n\nlet baseArray = [];\n\nclass Table extends Component {\n  componentDidMount() {\n    this.generateEmployees();\n  }\n\n  state = {\n    employees: [],\n    sortAsc: true,\n  };\n\n  generateEmployees() {\n    API.getRandomEmployee().then((res) => {\n      baseArray = res.data.results;\n      baseArray.forEach((item, i) => {\n        item.id = i + 1;\n      });\n      this.setState({ employees: baseArray });\n    });\n  }\n\n  sortEmployeesId() {\n    if (this.state.sortAsc) {\n      let newArray = this.state.employees.sort((a, b) =>\n        a.id >= b.id ? 1 : -1\n      );\n      this.setState({\n        employees: newArray,\n        sortAsc: false,\n      });\n    } else {\n      let newArray = this.state.employees.sort((a, b) =>\n        a.id <= b.id ? 1 : -1\n      );\n      this.setState({\n        employees: newArray,\n        sortAsc: true,\n      });\n    }\n  }\n\n  sortEmployeesFirst() {\n    if (this.state.sortAsc) {\n      let newArray = this.state.employees.sort((a, b) =>\n        a.name.first >= b.name.first ? 1 : -1\n      );\n      this.setState({\n        employees: newArray,\n        sortAsc: false,\n      });\n    } else {\n      let newArray = this.state.employees.sort((a, b) =>\n        a.name.first <= b.name.first ? 1 : -1\n      );\n      this.setState({\n        employees: newArray,\n        sortAsc: true,\n      });\n    }\n  }\n\n  sortEmployeesLast() {\n    if (this.state.sortAsc) {\n      let newArray = this.state.employees.sort((a, b) =>\n        a.name.last >= b.name.last ? 1 : -1\n      );\n      this.setState({\n        employees: newArray,\n        sortAsc: false,\n      });\n    } else {\n      let newArray = this.state.employees.sort((a, b) =>\n        a.name.last <= b.name.last ? 1 : -1\n      );\n      this.setState({\n        employees: newArray,\n        sortAsc: true,\n      });\n    }\n  }\n\n  sortEmployeesAge() {\n    if (this.state.sortAsc) {\n      let newArray = this.state.employees.sort((a, b) =>\n        a.dob.age >= b.dob.age ? 1 : -1\n      );\n      this.setState({\n        employees: newArray,\n        sortAsc: false,\n      });\n    } else {\n      let newArray = this.state.employees.sort((a, b) =>\n        a.dob.age <= b.dob.age ? 1 : -1\n      );\n      this.setState({\n        employees: newArray,\n        sortAsc: true,\n      });\n    }\n  }\n\n  sortEmployeesState() {\n    if (this.state.sortAsc) {\n      let newArray = this.state.employees.sort((a, b) =>\n        a.location.state >= b.location.state ? 1 : -1\n      );\n      this.setState({\n        employees: newArray,\n        sortAsc: false,\n      });\n    } else {\n      let newArray = this.state.employees.sort((a, b) =>\n        a.location.state <= b.location.state ? 1 : -1\n      );\n      this.setState({\n        employees: newArray,\n        sortAsc: true,\n      });\n    }\n  }\n\n  sortEmployeesZip() {\n    if (this.state.sortAsc) {\n      let newArray = this.state.employees.sort((a, b) =>\n        a.location.postcode >= b.location.postcode ? 1 : -1\n      );\n      this.setState({\n        employees: newArray,\n        sortAsc: false,\n      });\n    } else {\n      let newArray = this.state.employees.sort((a, b) =>\n        a.location.postcode <= b.location.postcode ? 1 : -1\n      );\n      this.setState({\n        employees: newArray,\n        sortAsc: true,\n      });\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    let searchParam = event.target.search.value.toLowerCase();\n    if (searchParam === \"\") {\n      this.handleReset();\n    }\n    let searchedArray = baseArray.filter(function (e) {\n      return (\n        e.name.first.toLowerCase().includes(searchParam) ||\n        e.name.last.toLowerCase().includes(searchParam)\n      );\n    });\n    this.setState({ employees: searchedArray });\n    event.target.search.value = \"\";\n  };\n\n  handleReset = (event) => {\n    event.preventDefault();\n    this.setState({ employees: baseArray });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            \n            <form id=\"searchBar\" onSubmit={this.handleSubmit}>\n              <input\n                className=\"form\"\n                type=\"text\"\n                name=\"search\"\n                placeholder=\"Search by name\"\n              />\n              <button type=\"button\" className=\"btn btn-dark\">\n                Search\n              </button>\n              <button\n              onClick={this.handleReset}\n              type=\"button\"\n              className=\"btn btn-dark\"\n            >\n              Reset\n            </button>\n            </form>\n            \n          </div>\n        </div>\n\n        <table>\n          <thead>\n            <tr>\n              <th\n                className=\"canClick\"\n                onClick={() => {\n                  this.sortEmployeesId();\n                }}\n              >\n                ID\n              </th>\n              <th\n                className=\"canClick\"\n                onClick={() => {\n                  this.sortEmployeesFirst();\n                }}\n              >\n                First\n              </th>\n              <th\n                className=\"canClick\"\n                onClick={() => {\n                  this.sortEmployeesLast();\n                }}\n              >\n                Last\n              </th>\n              <th>Email</th>\n              <th>Cell number</th>\n              <th\n                className=\"canClick\"\n                onClick={() => {\n                  this.sortEmployeesAge();\n                }}\n              >\n                Age\n              </th>\n              <th>Street address</th>\n              <th>City</th>\n              <th\n                className=\"canClick\"\n                onClick={() => {\n                  this.sortEmployeesState();\n                }}\n              >\n                State\n              </th>\n              <th\n                className=\"canClick\"\n                onClick={() => {\n                  this.sortEmployeesZip();\n                }}\n              >\n                Zip\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.employees.map((employee) => (\n              <Employee\n                id={employee.id}\n                first={employee.name.first}\n                last={employee.name.last}\n                email={employee.email}\n                cell={employee.cell}\n                age={employee.dob.age}\n                address={\n                  employee.location.street.number +\n                  \" \" +\n                  employee.location.street.name\n                }\n                city={employee.location.city}\n                state={employee.location.state}\n                zip={employee.location.postcode}\n              />\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","import React from \"react\";\nimport \"./App.css\";\nimport Table from \"./components/Table\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav className=\"header\">\n        <h1>Employee Directory</h1>\n      </nav>\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}