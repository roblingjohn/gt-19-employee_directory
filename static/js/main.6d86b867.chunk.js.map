{"version":3,"sources":["utils/API.js","components/Employee.js","utils/GenerateEmployees.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Employee","props","first","last","email","cell","age","address","city","state","zip","API","then","res","EmployeeArray","baseArray","Table","employees","handleSubmit","event","preventDefault","searchParam","target","search","value","toLowerCase","length","setState","searchedArray","filter","e","name","handleClick","this","generateEmployees","data","results","newArray","sort","a","b","dob","location","postcode","id","onSubmit","type","placeholder","onClick","className","sortEmployeesFirst","sortEmployeesLast","sortEmployeesAge","sortEmployeesState","sortEmployeesZip","map","employee","street","number","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6d86b867.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// Export an object containing methods we'll use for accessing the Dog.Ceo API\n\nexport default {\n  getRandomEmployee: function() {\n    return axios.get(\"https://randomuser.me/api/?nat=us&results=30\");\n  },\n};\n\n// export default API;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\n// import employeeArray from \"../utils/GenerateEmployees\"\n\n// console.log(employeeArray)\n\n// class Employee extends Component {\n//   componentDidMount() {\n//     this.generateEmployee();\n//   }\n\n//   state = {\n//     name: {\n//       first: \"\",\n//       last: \"\",\n//     },\n//   };\n\n//   generateEmployee() {\n//     API.getRandomEmployee().then((res) => {\n//       this.setState(res.data.results[0]);\n//     });\n//   }\n\n//   render() {\n  const Employee = (props) => {\n    return (\n      <tr>\n        <td>{props.first}</td>\n        <td>{props.last}</td>\n        <td>{props.email}</td>\n        <td>{props.cell}</td>\n        <td>{props.age}</td>\n        <td>{props.address}</td>\n        <td>{props.city}</td>\n        <td>{props.state}</td>\n        <td>{props.zip}</td>\n\n\n      </tr>\n    );\n  }\n\nexport default Employee;\n","import API from \"../utils/API\";\n\nlet EmployeeArray = [];\n\n// function getEmployees() {\n//   API.getRandomEmployee();\n// }\n\n// getEmployees().then(function(res) {\n//   employeeArray.push(res.data.results[0]);\n//   if(employeeArray.length<10){\n//     getEmployees();\n//   }\n// })\n\n\nAPI.getRandomEmployee().then((res) => {\n  EmployeeArray = {res}\n  // console.log(res.data.results)\n  return EmployeeArray\n\n});\n\nexport default EmployeeArray;\n","import React, { Component } from \"react\";\nimport Employee from \"./Employee\";\nimport API from \"../utils/API\";\nimport \"./TableStyle.css\";\nimport EmployeeArray from \"../utils/GenerateEmployees\";\nimport SearchBar from \"./SearchBar\";\n\nlet baseArray = [];\n\nclass Table extends Component {\n  componentDidMount() {\n    this.generateEmployees();\n  }\n\n  state = {\n    employees: [],\n  };\n\n  generateEmployees() {\n    API.getRandomEmployee().then((res) => {\n      baseArray = res.data.results;\n      this.setState({ employees: baseArray });\n    });\n  }\n\n  sortEmployeesFirst() {\n    let newArray = this.state.employees.sort((a, b) =>\n      a.name.first >= b.name.first ? 1 : -1\n    );\n    this.setState({ employees: newArray });\n  }\n\n  sortEmployeesLast() {\n    let newArray = this.state.employees.sort((a, b) =>\n      a.name.last >= b.name.last ? 1 : -1\n    );\n    this.setState({ employees: newArray });\n  }\n\n  sortEmployeesAge() {\n    let newArray = this.state.employees.sort((a, b) =>\n      a.dob.age >= b.dob.age ? 1 : -1\n    );\n    this.setState({ employees: newArray });\n  }\n\n  sortEmployeesState() {\n    let newArray = this.state.employees.sort((a, b) =>\n      a.location.state >= b.location.state ? 1 : -1\n    );\n    this.setState({ employees: newArray });\n  }\n\n  sortEmployeesZip() {\n    let newArray = this.state.employees.sort((a, b) =>\n      a.location.postcode >= b.location.postcode ? 1 : -1\n    );\n    this.setState({ employees: newArray });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    let searchParam = event.target.search.value.toLowerCase();\n    if (searchParam.length === 0) {\n      this.setState({ employees: baseArray });\n    }\n    let searchedArray = baseArray.filter(function (e) {\n      return e.name.first.toLowerCase() === searchParam || e.name.last.toLowerCase() === searchParam;\n    });\n    this.setState({ employees: searchedArray });\n    event.target.search.value = \"\"\n  };\n\n  handleClick = (event) => {\n    event.preventDefault();\n    this.setState({employees: baseArray})\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <form id=\"searchBar\" onSubmit={this.handleSubmit}>\n            <input type=\"text\" name=\"search\" placeholder=\"Search by name\" />\n            <button>Search</button>\n          </form>\n          <button onClick={this.handleClick}>Reset</button>\n        </div>\n        <table>\n          <thead>\n            <tr>\n              <th\n                className=\"canClick\"\n                onClick={() => {\n                  this.sortEmployeesFirst();\n                }}\n              >\n                First Name\n              </th>\n              <th\n                className=\"canClick\"\n                onClick={() => {\n                  this.sortEmployeesLast();\n                }}\n              >\n                Last Name\n              </th>\n              <th>Email</th>\n              <th>Cell number</th>\n              <th\n                className=\"canClick\"\n                onClick={() => {\n                  this.sortEmployeesAge();\n                }}\n              >\n                Age\n              </th>\n              <th>Street address</th>\n              <th>City</th>\n              <th\n                className=\"canClick\"\n                onClick={() => {\n                  this.sortEmployeesState();\n                }}\n              >\n                State\n              </th>\n              <th\n                className=\"canClick\"\n                onClick={() => {\n                  this.sortEmployeesZip();\n                }}\n              >\n                Zip\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.employees.map((employee) => (\n              <Employee\n                first={employee.name.first}\n                last={employee.name.last}\n                email={employee.email}\n                cell={employee.cell}\n                age={employee.dob.age}\n                address={\n                  employee.location.street.number +\n                  \" \" +\n                  employee.location.street.name\n                }\n                city={employee.location.city}\n                state={employee.location.state}\n                zip={employee.location.postcode}\n              />\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","import React from 'react';\nimport './App.css';\nimport Table from \"./components/Table\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <h1>Employee Directory</h1>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}